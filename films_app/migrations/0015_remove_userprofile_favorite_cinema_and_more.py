# Generated by Django 5.1.1 on 2025-03-10 03:03

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('films_app', '0014_pagetracker'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='userprofile',
            name='favorite_cinema',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='favorite_cinema_privacy',
        ),
        migrations.AddField(
            model_name='cinemavote',
            name='commitment_level',
            field=models.CharField(choices=[('definite', 'Definitely attending'), ('interested', 'Interested'), ('convenient', 'Only if convenient'), ('undecided', 'Undecided')], default='interested', help_text='How committed are you to seeing this film in theaters?', max_length=20),
        ),
        migrations.AddField(
            model_name='cinemavote',
            name='preferred_format',
            field=models.CharField(choices=[('standard', 'Standard screening'), ('imax', 'IMAX'), ('3d', '3D'), ('premium', 'Premium (recliner seats, etc.)'), ('any', 'Any format')], default='any', help_text='What format would you prefer to see this film in?', max_length=20),
        ),
        migrations.AddField(
            model_name='cinemavote',
            name='social_preference',
            field=models.CharField(choices=[('solo', 'Going solo'), ('partner', 'With partner'), ('friends', 'With friends'), ('family', 'With family'), ('open', 'Open to company'), ('undecided', 'Undecided')], default='undecided', help_text='Who would you like to see this film with?', max_length=20),
        ),
        migrations.AddField(
            model_name='vote',
            name='commitment_level',
            field=models.CharField(choices=[('definite', 'Definitely attending'), ('interested', 'Interested'), ('convenient', 'Only if convenient'), ('undecided', 'Undecided')], default='interested', help_text='How committed are you to seeing this film in theaters?', max_length=20),
        ),
        migrations.AddField(
            model_name='vote',
            name='preferred_format',
            field=models.CharField(choices=[('standard', 'Standard screening'), ('imax', 'IMAX'), ('3d', '3D'), ('premium', 'Premium (recliner seats, etc.)'), ('any', 'Any format')], default='any', help_text='What format would you prefer to see this film in?', max_length=20),
        ),
        migrations.AddField(
            model_name='vote',
            name='social_preference',
            field=models.CharField(choices=[('solo', 'Going solo'), ('partner', 'With partner'), ('friends', 'With friends'), ('family', 'With family'), ('open', 'Open to company'), ('undecided', 'Undecided')], default='undecided', help_text='Who would you like to see this film with?', max_length=20),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='travel_distance',
            field=models.PositiveIntegerField(default=10, help_text='How far are you willing to travel to a cinema (in miles)?'),
        ),
        migrations.CreateModel(
            name='Cinema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the cinema', max_length=255)),
                ('chain', models.CharField(blank=True, help_text='Cinema chain (e.g., Odeon, Vue, Cineworld)', max_length=255, null=True)),
                ('location', models.CharField(help_text='Location of the cinema (city/town)', max_length=255)),
                ('postcode', models.CharField(blank=True, help_text='Postcode of the cinema', max_length=10, null=True)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinate for mapping', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinate for mapping', null=True)),
                ('website', models.URLField(blank=True, help_text='Website URL for the cinema', null=True)),
                ('has_imax', models.BooleanField(default=False, help_text='Whether this cinema has IMAX screens')),
                ('has_3d', models.BooleanField(default=False, help_text='Whether this cinema has 3D capability')),
                ('has_premium_seating', models.BooleanField(default=False, help_text='Whether this cinema has premium seating (recliners, etc.)')),
                ('has_food_service', models.BooleanField(default=False, help_text='Whether this cinema has in-screen food service')),
                ('has_bar', models.BooleanField(default=False, help_text='Whether this cinema has a bar')),
                ('has_disabled_access', models.BooleanField(default=True, help_text='Whether this cinema has disabled access')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name', 'location'],
                'unique_together': {('name', 'location', 'postcode')},
            },
        ),
        migrations.CreateModel(
            name='CinemaPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_favorite', models.BooleanField(default=False, help_text='Whether this is a favorite cinema')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cinema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_preferences', to='films_app.cinema')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cinema_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_favorite', '-updated_at'],
                'unique_together': {('user', 'cinema')},
            },
        ),
    ]
